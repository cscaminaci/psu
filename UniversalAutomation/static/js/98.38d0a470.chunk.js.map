{"version":3,"sources":["components/terminal/terminal.tsx"],"names":["fitAddon","FitAddon","searchAddon","SearchAddon","webLinksAddon","WebLinksAddon","TerminalComponent","id","useParams","xtermRef","React","useRef","xtermCommandRef","nav","useNavigate","close","useMutation","axios","post","onSuccess","data","queryClient","refetchQueries","stale","mutateAsync","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","configureLogging","LogLevel","Debug","build","onConnected","useCallback","ws","a","invoke","Number","parseInt","terminal","current","write","writePrompt","then","i","length","trimEnd","clear","onKey","key","toLocaleLowerCase","writeln","substr","useEffect","termRefVar","fit","start","catch","err","dispose","className","icon","danger","onClick","style","float","ref","addons","options","cursorBlink"],"mappings":"sUAcMA,EAAW,IAAIC,WACfC,EAAc,IAAIC,cAClBC,EAAgB,IAAIC,gBA4HXC,UA1HW,WAAO,IACrBC,EAAOC,cAAPD,GACFE,EAAWC,IAAMC,OAAc,MAC/BC,EAAkBF,IAAMC,OAAe,IAEvCE,EAAMC,cAESC,EAAUC,aAC3B,kBACIC,IAAMC,KAAN,oCAAwCX,MAC5C,CACIY,UAAW,SAACC,GACRC,IAAYC,eAAZ,qBAAiD,CAAEC,OAAO,IAC1DV,EAAI,kCANRW,YAWFC,GAAa,IAAIC,KAClBC,QADc,gBAEdC,yBACAC,iBAAiBC,IAASC,OAC1BC,QAECC,EAAcvB,IAAMwB,YAAN,uCAAkB,WAAOC,GAAP,mBAAAC,EAAA,sEACjBD,EAAGE,OAAO,UAAWC,OAAOC,SAAShC,IADpB,OAC9Ba,EAD8B,OAE5BoB,EAAW/B,EAASgC,QAAQD,SACrB,YAATpB,GACAoB,EAASE,MAAM,sBAAwBtB,GAGrCuB,EAAc,WAChBR,EAAGE,OAAO,SAAU,UAAUO,MAAK,SAAAxB,GAC/B,IAAK,IAAIyB,EAAI,EAAGA,EAAIzB,EAAK0B,OAAQD,IAC7BL,EAASE,MAAM,SAGnBF,EAASE,MAAMtB,EAAK2B,eAI5BP,EAASQ,QACTL,IAEAlC,EAASgC,QAAQD,SAASS,OAAM,SAACC,GAC7B,GAAgB,OAAZA,EAAIA,IAAc,CAClB,GAAoD,QAAhDtC,EAAgB6B,QAAQU,qBAAiF,eAAhDvC,EAAgB6B,QAAQU,oBAIjF,OAHAX,EAASQ,QACTL,SACA/B,EAAgB6B,QAAU,IAI9BN,EAAGE,OAAO,SAAUzB,EAAgB6B,SAASG,MAAK,SAAAxB,GAC9CoB,EAASY,QAAQhC,GACjBuB,IACA/B,EAAgB6B,QAAU,MAKlC,GAAgB,SAAZS,EAAIA,IAWQ,SAAZA,EAAIA,KASRzC,EAASgC,QAAQD,SAASE,MAAMQ,EAAIA,KACpCtC,EAAgB6B,QAAU7B,EAAgB6B,QAAUS,EAAIA,KAThDtC,EAAgB6B,QAAQK,OAAS,IACjClC,EAAgB6B,QAAU7B,EAAgB6B,QAAQY,OAAO,EAAGzC,EAAgB6B,QAAQK,OAAS,GAC7FN,EAASE,MAAM,eAbnB,GAAI9B,EAAgB6B,QAAQK,OAAS,EAAG,CACpC,IAAK,IAAID,EAAI,EAAGA,EAAIjC,EAAgB6B,QAAQK,OAAQD,IAChDL,EAASE,MAAM,SAEnB9B,EAAgB6B,QAAU,OA1CJ,2CAAlB,sDA4DjB,CAAChC,EAAUF,IAqBd,OAnBA+C,qBAAU,WACN,IAAIC,EAAa9C,EAASgC,QAe1B,OAdAzC,EAASwD,MAET/B,EAAWgC,QACNb,MAAK,WACFX,EAAYR,MAEfiC,OAAM,SAACC,GACJlD,EAASgC,QAAQD,SAASE,MAAMiB,MAGxClD,EAASgC,QAAQD,SAASY,QACtB,iBAGG,kBAAMG,EAAWf,SAASoB,aAClC,CAACrD,EAAIkB,EAAYQ,IAGhB,sBAAK4B,UAAU,YAAf,UACI,cAAC,IAAD,CAAQC,KAAM,cAAC,IAAD,IAAoBC,QAAM,EAACC,QAAS,kBAAMjD,KAASkD,MAAO,CAAEC,MAAO,SAAjF,kBACA,cAAC,IAAD,CACIC,IAAK1D,EACL2D,OAAQ,CAAClE,EAAaF,EAAUI,GAChCiE,QAAS,CAELC,aAAa,GAEjBT,UAAU","file":"static/js/98.38d0a470.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { WebLinksAddon } from \"xterm-addon-web-links\";\r\nimport { FitAddon } from \"xterm-addon-fit\";\r\nimport { SearchAddon } from \"xterm-addon-search\";\r\nimport { XTerm } from \"xterm-for-react\";\r\nimport { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { Button } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useMutation } from \"react-query3\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport queryClient from \"components/utils/queryClient\";\r\n\r\nconst fitAddon = new FitAddon();\r\nconst searchAddon = new SearchAddon();\r\nconst webLinksAddon = new WebLinksAddon();\r\n\r\nconst TerminalComponent = () => {\r\n    const { id } = useParams();\r\n    const xtermRef = React.useRef<XTerm>(null);\r\n    const xtermCommandRef = React.useRef<string>(\"\");\r\n\r\n    const nav = useNavigate();\r\n\r\n    const { mutateAsync: close } = useMutation(\r\n        () =>\r\n            axios.post(`/api/v1/terminal/instance/${id}`),\r\n        {\r\n            onSuccess: (data) => {\r\n                queryClient.refetchQueries(`/terminal/instance`, { stale: true });\r\n                nav(`/admin/automation/terminals`);\r\n            },\r\n        }\r\n    );\r\n\r\n    const connection = new HubConnectionBuilder()\r\n        .withUrl(`/terminalhub`)\r\n        .withAutomaticReconnect()\r\n        .configureLogging(LogLevel.Debug)\r\n        .build();\r\n\r\n    const onConnected = React.useCallback(async (ws) => {\r\n        var data = await ws.invoke(\"connect\", Number.parseInt(id));\r\n        const terminal = xtermRef.current.terminal;\r\n        if (data !== \"success\") {\r\n            terminal.write(\"Failed to connect: \" + data);\r\n        }\r\n\r\n        const writePrompt = () => {\r\n            ws.invoke(\"invoke\", \"prompt\").then(data => {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    terminal.write('\\b \\b');\r\n                }\r\n\r\n                terminal.write(data.trimEnd());\r\n            });\r\n        }\r\n\r\n        terminal.clear();\r\n        writePrompt();\r\n\r\n        xtermRef.current.terminal.onKey((key) => {\r\n            if (key.key === \"\\r\") {\r\n                if (xtermCommandRef.current.toLocaleLowerCase() === \"cls\" || xtermCommandRef.current.toLocaleLowerCase() === \"clear-host\") {\r\n                    terminal.clear();\r\n                    writePrompt();\r\n                    xtermCommandRef.current = \"\";\r\n                    return;\r\n                }\r\n\r\n                ws.invoke(\"invoke\", xtermCommandRef.current).then(data => {\r\n                    terminal.writeln(data);\r\n                    writePrompt();\r\n                    xtermCommandRef.current = \"\";\r\n                });\r\n            }\r\n\r\n            // escape\r\n            if (key.key === \"\\x1B\") {\r\n                if (xtermCommandRef.current.length > 0) {\r\n                    for (let i = 0; i < xtermCommandRef.current.length; i++) {\r\n                        terminal.write('\\b \\b');\r\n                    }\r\n                    xtermCommandRef.current = \"\";\r\n                }\r\n                return;\r\n            }\r\n\r\n            //backspace\r\n            if (key.key === \"\\x7F\") {\r\n                if (xtermCommandRef.current.length > 0) {\r\n                    xtermCommandRef.current = xtermCommandRef.current.substr(0, xtermCommandRef.current.length - 1);\r\n                    terminal.write('\\b \\b');\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            xtermRef.current.terminal.write(key.key);\r\n            xtermCommandRef.current = xtermCommandRef.current + key.key;\r\n        });\r\n    }, [xtermRef, id]);\r\n\r\n    useEffect(() => {\r\n        let termRefVar = xtermRef.current;\r\n        fitAddon.fit();\r\n\r\n        connection.start()\r\n            .then(() => {\r\n                onConnected(connection)\r\n            })\r\n            .catch((err) => {\r\n                xtermRef.current.terminal.write(err)\r\n            });\r\n\r\n        xtermRef.current.terminal.writeln(\r\n            \"Connecting...\"\r\n        );\r\n\r\n        return () => termRefVar.terminal.dispose();\r\n    }, [id, connection, onConnected]);\r\n\r\n    return (\r\n        <div className=\"height100\">\r\n            <Button icon={<DeleteOutlined />} danger onClick={() => close()} style={{ float: 'right' }}>Exit</Button>\r\n            <XTerm\r\n                ref={xtermRef}\r\n                addons={[searchAddon, fitAddon, webLinksAddon]}\r\n                options={{\r\n                    //cols: 80,\r\n                    cursorBlink: true,\r\n                }}\r\n                className=\"height100\"\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TerminalComponent;\r\n"],"sourceRoot":""}