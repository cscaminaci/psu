{"version":3,"sources":["components/ui/ResourceInfo.tsx","components/jobs/components/ViewScriptButton.tsx","components/jobs/components/CancelJobButton.tsx","components/jobs/JobViews.tsx","components/jobs/job.tsx"],"names":["ResourceInfo","props","navigate","useNavigate","bordered","bodyStyle","padding","ghost","onBack","ViewScriptButton","job","location","useLocation","requiredRoles","title","isScriptDeleted","type","icon","disabled","aria-label","scriptFullPath","onClick","state","from","pathname","CancelJobButton","useMutation","cancel","mutateAsync","isLoading","status","autoAdjustOverflow","arrowPointAtCenter","color","okText","cancelText","onConfirm","key","id","action","loading","JobPipelineAsTree","lazy","JobErrorTable","JobParametersTable","JobViews","useState","current","setCurrent","views","pipeline","errors","parameters","headStyle","borderBottom","height","paddingTop","tabList","tab","activeTabKey","onTabChange","tabProps","tabBarStyle","tabBarExtraContent","Loader","tip","JobOutput","React","JobProgress","JobPage","useParams","showTimestamp","setShowTimestamp","refetchInterval","setRefetchInterval","data","useQuery","enabled","refetchOnWindowFocus","onSuccess","JobStatus","Running","Canceling","Queued","Page","resource","subTitle","tags","output","statusDescription","setStatusTag","extra","Modal","FeedbackModal","feedbackComplete","span","direction","size","generateJobDescription","JobDateTime"],"mappings":"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","file":"static/js/19.5b4e037b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, PageHeaderProps, PageHeader } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ResourceInfo(props: PageHeaderProps & { children?: React.ReactNode }) {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Card bordered={false} bodyStyle={{padding: 0}}>\r\n      <PageHeader {...props} ghost={true} onBack={() => navigate(-1)} />\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, ButtonProps, Tooltip } from \"antd\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { Job } from \"types\";\r\nimport { CodeFilled } from \"@ant-design/icons\";\r\nimport RoleGuard from \"components/standalone/role-guard\";\r\n\r\ntype ViewScriptButtonProps = {\r\n  job: Job;\r\n} & ButtonProps;\r\n\r\nexport default function ViewScriptButton({\r\n  job,\r\n  ...props\r\n}: ViewScriptButtonProps) {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <RoleGuard requiredRoles={[\"Administrator\"]}>\r\n      <Tooltip title={job?.isScriptDeleted ? \"Script deleted\" : \"Go to script\"}>  \r\n      <Button\r\n        type=\"text\"\r\n        icon={<CodeFilled />}\r\n        {...props}\r\n        disabled={job?.isScriptDeleted}\r\n        aria-label={`view script ${job?.scriptFullPath} button`}\r\n        onClick={() =>\r\n          navigate(`/admin/automation/scripts/${job?.scriptFullPath}`, {\r\n            state: {\r\n              from: location?.pathname,\r\n            },\r\n          })\r\n        }\r\n      />\r\n      </Tooltip>\r\n    </RoleGuard>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useMutation } from \"components/utils/queryClient\";\r\nimport { Job } from \"types\";\r\nimport { Button, ButtonProps, Popconfirm, Tooltip } from \"antd\";\r\nimport RoleGuard from \"components/standalone/role-guard\";\r\nimport { StopFilled } from \"@ant-design/icons\";\r\n\r\ntype CancelJobButtonProps = {\r\n  job: Job;\r\n} & ButtonProps;\r\n\r\nexport default function CancelJobButton({\r\n  job,\r\n  ...props\r\n}: CancelJobButtonProps) {\r\n  const { mutateAsync: cancel, isLoading } = useMutation();\r\n\r\n  function onClick() {\r\n    cancel({\r\n      key: `/job/${job?.id}`,\r\n      action: \"delete\",\r\n    });\r\n  }\r\n\r\n  return job?.status === 1 || job?.status === 4 ? (\r\n    <RoleGuard requiredRoles={[\"Administrator\"]}>\r\n      <Popconfirm\r\n        autoAdjustOverflow\r\n        arrowPointAtCenter\r\n        color=\"red\"\r\n        okText=\"Yes\"\r\n        cancelText=\"No\"\r\n        title=\"Are you sure you want to stop this job?\"\r\n        onConfirm={onClick}\r\n      >\r\n        <Tooltip title=\"Stop Job\">\r\n          <Button\r\n            aria-label={`cancel job ${job?.id} button`}\r\n            loading={isLoading}\r\n            type=\"text\"\r\n            icon={<StopFilled />}\r\n            {...props}\r\n          />\r\n        </Tooltip>\r\n      </Popconfirm>\r\n    </RoleGuard>\r\n  ) : null;\r\n}\r\n","import React, { lazy, useState } from \"react\";\r\nimport { Button, Card } from \"antd\";\r\nimport { RightPanelSizeButton } from \"components/pages/Page\";\r\nimport Loader from \"components/utils/Loader\";\r\n\r\nconst JobPipelineAsTree = lazy(() => import(\"./JobPipelineAsTree\"));\r\nconst JobErrorTable = lazy(() => import(\"./JobErrorTable\"));\r\nconst JobParametersTable = lazy(() => import(\"./JobParametersTable\"));\r\n\r\nexport default function JobViews() {\r\n  const [current, setCurrent] = useState(\"pipeline\")\r\n  const tabs = [\r\n    {\r\n      key: \"pipeline\",\r\n      tab: \"Pipeline\",\r\n    },\r\n    {\r\n      key: \"errors\",\r\n      tab: \"Errors\",\r\n    },\r\n    {\r\n      key: \"parameters\",\r\n      tab: \"Parameters\",\r\n    },\r\n  ];\r\n\r\n  const views = {\r\n    pipeline: <JobPipelineAsTree />,\r\n    errors: <JobErrorTable />,\r\n    parameters: <JobParametersTable />,\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      bordered={false}\r\n      headStyle={{ borderBottom: 0, height: 64 }}\r\n      bodyStyle={{ paddingTop: 24 }}\r\n      tabList={tabs}\r\n      activeTabKey={current}\r\n      onTabChange={(key) => setCurrent(key)}\r\n      tabProps={{\r\n        type: \"line\",\r\n        tabBarStyle: { height: 64 },\r\n      }}\r\n      tabBarExtraContent={\r\n        <RightPanelSizeButton>\r\n          <Button />\r\n        </RightPanelSizeButton>\r\n      }\r\n    >\r\n      <Loader tip={`Loading ${current}`}>{views[current]}</Loader>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Page, {\r\n  LeftPanel,\r\n  PageContentBase,\r\n  PageHeader,\r\n  RightPanel,\r\n} from \"components/pages/Page\";\r\nimport ResourceInfo from \"components/ui/ResourceInfo\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Job, JobStatus } from \"types\";\r\nimport { useParams } from \"react-router\";\r\nimport JobViews from \"./JobViews\";\r\nimport { Modal } from \"components/ui/Modal\";\r\nimport FeedbackModal from \"./components/FeedbackModal\";\r\nimport { generateJobDescription, setStatusTag } from \"components/utils/utils\";\r\nimport JobDateTime from \"./JobDateTime\";\r\nimport CancelJobButton from \"./components/CancelJobButton\";\r\nimport ViewScriptButton from \"./components/ViewScriptButton\";\r\nimport { Col, Row, Space, Tooltip } from \"antd\";\r\n\r\nconst JobOutput = React.lazy(() => import(\"./output\"));\r\nconst JobProgress = React.lazy(() => import(\"./components/Progress\"));\r\n\r\nexport default function JobPage() {\r\n  const { id } = useParams();\r\n  const [showTimestamp, setShowTimestamp] = React.useState(true);\r\n  const [refetchInterval, setRefetchInterval] = React.useState<false | number>(1000)\r\n\r\n  const { data } = useQuery<Job>(`/job/${id}`, {\r\n    enabled: !!id,\r\n    refetchOnWindowFocus: false,\r\n    refetchInterval,\r\n    onSuccess: (job) => {\r\n      if (job.status !== JobStatus.Running && job.status !== JobStatus.Canceling && job.status !== JobStatus.Queued) {\r\n        setRefetchInterval(false)\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Page resource={data}>\r\n      <PageHeader>\r\n        <ResourceInfo\r\n          title={data?.id}\r\n          subTitle={`#${data?.scriptFullPath}`}\r\n          tags={data?.status === 3 ? (\r\n            <Tooltip title={data?.output || data?.statusDescription} color=\"red\">\r\n              {setStatusTag(data?.status)}\r\n            </Tooltip>\r\n          ) : (\r\n            <Tooltip title={data?.output || data?.statusDescription}>\r\n              {setStatusTag(data?.status)}\r\n            </Tooltip>\r\n\r\n          )}\r\n          extra={\r\n            data?.status === 4\r\n              ? [\r\n                <Modal>\r\n                  <FeedbackModal job={data} feedbackComplete={() => setRefetchInterval(1000)} />\r\n                </Modal>,\r\n                <ViewScriptButton job={data} />,\r\n                <CancelJobButton job={data} />,\r\n              ]\r\n              : [\r\n                <ViewScriptButton job={data} />,\r\n                <CancelJobButton job={data} />,\r\n              ]\r\n          }\r\n        >\r\n          <Row>\r\n            <Col span={12}>\r\n              <Space direction=\"vertical\" size=\"small\">\r\n                {generateJobDescription(data)}\r\n                <JobDateTime job={data} />\r\n              </Space>\r\n            </Col>\r\n            <Col span={12}>\r\n              <JobProgress job={data} />\r\n            </Col>\r\n          </Row>\r\n\r\n        </ResourceInfo>\r\n      </PageHeader>\r\n      <PageContentBase>\r\n        <LeftPanel>\r\n          <JobOutput\r\n            job={data}\r\n            refetchInterval={refetchInterval}\r\n            showTimestamp={showTimestamp}\r\n            setShowTimestamp={() => setShowTimestamp(!showTimestamp)}\r\n          />\r\n        </LeftPanel>\r\n        <RightPanel>\r\n          <JobViews />\r\n        </RightPanel>\r\n      </PageContentBase>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}