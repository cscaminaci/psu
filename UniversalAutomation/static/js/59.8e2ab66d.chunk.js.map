{"version":3,"sources":["components/api/apis.tsx"],"names":["Table","React","lazy","EditModal","DeleteButton","EditorButton","EndpointModal","Apis","useState","tags","setTags","useQuery","enabled","endpoints","data","isLoading","refetch","configurationResult","columns","key","title","dataIndex","width","render","text","row","Text","strong","style","color","setMethodColor","method","toUpperCase","record","path","role","map","align","authentication","editable","value","tag","length","cursor","onClick","find","m","name","allowedWithOneWayGitSync","to","id","resource","subTitle","extra","icon","href","target","success","error","type","message","description","actions","closable","onClose","filter","loading","endpoint","queryFn"],"mappings":"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","file":"static/js/59.8e2ab66d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Alert, Button, PageHeader, Space, Tag, Typography } from \"antd\";\r\nimport { ConfigurationResult, CustomColumns, Endpoint } from \"../../types\";\r\nimport { setMethodColor } from \"../utils/utils\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Modal } from \"components/ui/Modal\";\r\nimport { LinkOutlined } from \"@ant-design/icons\";\r\n\r\nconst Table = React.lazy(() => import(\"components/ui/Table\"));\r\nconst EditModal = React.lazy(() => import(\"components/ui/EditModal\"));\r\nconst DeleteButton = React.lazy(() => import(\"components/ui/DeleteButton\"));\r\nconst EditorButton = React.lazy(() => import(\"components/ui/EditorButton\"));\r\nconst EndpointModal = React.lazy(() => import(\"./EndpointModal\"));\r\n\r\nexport default function Apis() {\r\n  const [tags, setTags] = React.useState([]);\r\n  const { data: endpoints, isLoading, refetch } = useQuery<Endpoint[]>(\r\n    \"/endpoint\",\r\n    { enabled: false }\r\n  );\r\n\r\n  const { data: configurationResult } = useQuery<ConfigurationResult>(\r\n    \"/configuration/status/Endpoint\"\r\n  );\r\n\r\n  const columns: CustomColumns<Endpoint>[] = [\r\n    {\r\n      key: \"method\",\r\n      title: \"Method\",\r\n      dataIndex: \"method\",\r\n      width: \"5%\",\r\n      render: (text, row: Endpoint) => {\r\n        return (\r\n          <Typography>\r\n            <Typography.Text\r\n              strong\r\n              style={{ color: setMethodColor(row.method) }}\r\n            >\r\n              {row.method?.toUpperCase()}\r\n            </Typography.Text>\r\n          </Typography>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      key: \"url\",\r\n      title: \"Url\",\r\n      dataIndex: \"url\",\r\n    },\r\n    {\r\n      key: \"description\",\r\n      title: \"Description\",\r\n      dataIndex: \"description\",\r\n    },\r\n    {\r\n      key: \"path\",\r\n      title: \"Path\",\r\n      dataIndex: \"path\",\r\n      render: (text, record) => record?.path || \"endpoints.ps1\"\r\n    },\r\n    {\r\n      key: \"role\",\r\n      title: \"Role\",\r\n      dataIndex: \"role\",\r\n      render: (text, record) =>\r\n        record?.role?.map((role) => (\r\n          <Tag key={role} color=\"blue\">\r\n            {role}\r\n          </Tag>\r\n        ))\r\n    },\r\n    {\r\n      key: \"authentication\",\r\n      title: \"Authentication\",\r\n      dataIndex: \"authentication\",\r\n      align: \"center\",\r\n      render: (text, record) =>\r\n        record?.authentication ? \"Enabled\" : \"Disabled\",\r\n    },\r\n    {\r\n      key: \"tags\",\r\n      title: \"Tags\",\r\n      dataIndex: \"tags\",\r\n      editable: false,\r\n      render: (value, record: Endpoint) => {\r\n        return record.tag?.length > 0\r\n          ? record?.tag?.map((tag) => (\r\n            <Tag key={tag?.name} color={tag?.color} style={{ cursor: 'pointer' }} onClick={() => {\r\n              if (!tags.find(m => m.name === tag.name)) {\r\n                setTags([...tags, tag]);\r\n              }\r\n            }}>\r\n              {tag?.name}\r\n            </Tag>\r\n          ))\r\n          : null;\r\n      },\r\n    },\r\n    {\r\n      width: \"fit-content\",\r\n      dataIndex: \"actions\",\r\n      render: (text, record) => {\r\n        return (\r\n          <Space>\r\n            <Modal>\r\n              <EditModal record={record} allowedWithOneWayGitSync={false} />\r\n            </Modal>\r\n            {record?.path === null && <EditorButton to={`${record?.id}`} allowedWithOneWayGitSync={false} />}\r\n            <DeleteButton resource={record} allowedWithOneWayGitSync={false} />\r\n          </Space>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <PageHeader title=\"Endpoints\" subTitle=\"HTTP API endpoints that execute PowerShell Scripts.\" extra={[\r\n      <Button icon={<LinkOutlined />} href=\"https://docs.powershelluniversal.com/api/about\" target=\"_blank\">Documentation</Button>\r\n    ]}>\r\n      {configurationResult?.success === false && configurationResult?.error ? <Alert type=\"error\" message={\"These is an error with the configuration script for this page. You will need to correct the issue manually before continuing. \"} description={configurationResult?.error}></Alert> :\r\n        <Table\r\n          title=\"Endpoints\"\r\n          actions={[\r\n            tags.map(tag => {\r\n              return (\r\n                <Tag color={tag.color}\r\n                  closable\r\n                  onClose={() => {\r\n                    setTags(tags.filter(m => m.name !== tag.name));\r\n                  }}>{tag.name}</Tag>\r\n              )\r\n            }),\r\n            <Modal>\r\n              <EndpointModal />\r\n            </Modal>,\r\n          ]}\r\n          columns={columns}\r\n          loading={isLoading}\r\n          data={endpoints?.filter((endpoint) => tags.length === 0 || (endpoint.tag && endpoint.tag?.find(m => tags.find(tag => tag.name === m.name))))}\r\n          queryFn={refetch}\r\n        />}\r\n    </PageHeader>\r\n\r\n  );\r\n}\r\n"],"sourceRoot":""}