{"version":3,"sources":["components/git/GitStatusTable.tsx","components/git/Git.tsx","components/pages/notLicensed.tsx"],"names":["gitChangeColumns","title","dataIndex","key","render","value","record","setGitChangeIcon","type","GitChangeTable","commitId","useQuery","data","isLoading","dataSource","columns","loading","text","setGitStatusIcon","result","formatDate","timestamp","GitStatusTable","expandable","expandedRowRender","rowExpandable","Git","modeTag","settings","licensed","useAppStore","gitSyncEnabled","Feature","Api","gitSyncBehavior","GitSyncBehavior","TwoWay","color","OneWay","PushOnly","subTitle","extra","icon","LinkOutlined","href","target","tags","direction","Text","strong","code","gitRemote","gitBranch","NotLicensed","status","onClick","window","location"],"mappings":"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","file":"static/js/46.b5cb1b01.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { CustomColumns, GitChange, GitStatus } from \"types\";\r\nimport { formatDate, setGitChangeIcon, setGitStatusIcon } from \"components/utils/utils\";\r\nimport { Table } from 'antd';\r\n//import Table from \"components/ui/Table\";\r\n\r\nconst gitChangeColumns: CustomColumns<GitChange>[] = [\r\n  {\r\n    title: \"Path\",\r\n    dataIndex: \"path\",\r\n    key: \"path\",\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    dataIndex: \"type\",\r\n    key: \"type\",\r\n    render: (value, record) => {\r\n      return setGitChangeIcon(record.type);\r\n    }\r\n  },\r\n]\r\n\r\nconst GitChangeTable = ({ commitId }) => {\r\n  const { data, isLoading } = useQuery<GitChange[]>(`/gitStatus/${commitId}`);\r\n  return <Table dataSource={data} columns={gitChangeColumns} loading={isLoading} />\r\n}\r\n\r\nconst columns: CustomColumns<GitStatus>[] = [\r\n  {\r\n    title: \"Id\",\r\n    dataIndex: \"id\",\r\n    key: \"id\",\r\n  },\r\n  {\r\n    title: \"Result\",\r\n    key: \"result\",\r\n    render: (text, record) => setGitStatusIcon(record.result),\r\n  },\r\n  {\r\n    title: \"Result Message\",\r\n    dataIndex: \"resultMessage\",\r\n    key: \"resultMessage\",\r\n  },\r\n  {\r\n    title: \"Timestamp\",\r\n    dataIndex: \"timestamp\",\r\n    key: \"timestamp\",\r\n    render: (text, record) => formatDate(record?.timestamp),\r\n  },\r\n];\r\n\r\nexport default function GitStatusTable() {\r\n  const { data, isLoading } = useQuery<GitStatus[]>(\"/gitStatus\");\r\n  return (\r\n    <Table\r\n      //title=\"Git Synchronizations\"\r\n      dataSource={data}\r\n      columns={columns}\r\n      loading={isLoading}\r\n      expandable={{\r\n        expandedRowRender: record => <GitChangeTable commitId={record.commitId} />,\r\n        rowExpandable: () => true,\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { PageHeader, Result, Spin, Tag, Tooltip, Typography, Space, Button } from \"antd\";\r\nimport GitStatusTable from \"./GitStatusTable\";\r\nimport { useQuery } from \"react-query3\";\r\nimport { Feature, GitSyncBehavior, Settings } from './../../types';\r\nimport { LinkOutlined } from \"@ant-design/icons\";\r\nimport useAppStore from \"components/context/app/Hooks\";\r\nimport NotLicensed from \"components/pages/notLicensed\";\r\n\r\nexport default function Git() {\r\n\r\n    const { data: settings, isLoading } = useQuery<Settings>(\"/settings\");\r\n    const { licensed } = useAppStore();\r\n\r\n    if (isLoading || !settings) {\r\n        return <Spin />;\r\n    }\r\n\r\n    if (!settings?.gitSyncEnabled) {\r\n        return <Result title=\"Git synchronization is disabled\" subTitle=\"You can enable git synchronization in appsettings.json.\" extra={\r\n            [\r\n                <Button icon={<LinkOutlined />} href=\"https://docs.powershelluniversal.com/config/git\" target=\"_blank\">Documentation</Button>\r\n            ]\r\n        } />\r\n    }\r\n\r\n    if (!licensed(Feature.Api)) {\r\n        return <NotLicensed title=\"Git synchronization requires a license.\" />;\r\n    }\r\n\r\n    let modeTag;\r\n    if (settings.gitSyncBehavior === GitSyncBehavior.TwoWay) {\r\n        modeTag = <Tooltip title=\"PowerShell Universal is pushing and pulling changes from git.\"><Tag color=\"blue\">Two-Way</Tag></Tooltip>;\r\n    }\r\n    else if (settings.gitSyncBehavior === GitSyncBehavior.OneWay) {\r\n        modeTag = <Tooltip title=\"PowerShell Universal is running in read-only mode and pulling changes from git.\"><Tag color=\"blue\">One-Way</Tag></Tooltip>;\r\n    }\r\n    else if (settings.gitSyncBehavior === GitSyncBehavior.PushOnly) {\r\n        modeTag = <Tooltip title=\"PowerShell Universal is pushing changes but will not pull changes.\"><Tag color=\"blue\">Push Only</Tag></Tooltip>;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <PageHeader title=\"Git\" subTitle=\"Git synchronization pulls and pushes to a remote repository.\"\r\n            extra={\r\n                [\r\n                    <Button icon={<LinkOutlined />} href=\"https://docs.powershelluniversal.com/config/git\" target=\"_blank\">Documentation</Button>\r\n                ]\r\n            }\r\n            tags={modeTag} >\r\n\r\n            <Space direction=\"vertical\">\r\n                <Space direction=\"horizontal\">\r\n                    <Space direction=\"horizontal\">\r\n                        <Typography.Text strong>Remote:</Typography.Text>\r\n                        <Typography.Text code>{settings.gitRemote}</Typography.Text>\r\n                    </Space>\r\n                    <Space direction=\"horizontal\">\r\n                        <Typography.Text strong>Branch:</Typography.Text>\r\n                        <Typography.Text code>{settings.gitBranch}</Typography.Text>\r\n                    </Space>\r\n                </Space>\r\n                <GitStatusTable />\r\n            </Space>\r\n\r\n        </PageHeader>\r\n\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Result, Button } from \"antd\";\r\nimport { CreditCardOutlined } from \"@ant-design/icons\";\r\n\r\nexport default function NotLicensed({ title }) {\r\n  return (\r\n    <Result\r\n      title={title}\r\n      status=\"warning\"\r\n      extra={\r\n        <Button\r\n          icon={<CreditCardOutlined />}\r\n          onClick={() => {\r\n            window.location.href =\r\n              \"https://ironmansoftware.com/powershell-universal?rel=product\";\r\n          }}\r\n        >\r\n          Buy License\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n}\r\n"],"sourceRoot":""}